---
- name: Set Local Scanner true if all conditions met
  ansible.builtin.set_fact:
    local_scanner: true
  when:
    - (scan_directories | default([]) | selectattr('path', 'defined') | map(attribute='path') | map('trim') | select('ne', '') | list | length) > 0
    - (metrics_host_file_path | default('') | trim | length > 0) or
      (metrics_aggregate_delegate_host | default('') | trim | length > 0)

- name: Set Prometheus Server true if all conditions met
  ansible.builtin.set_fact:
    ci_prometheus_server: true
  when:
    - ci_sd_prometheus_file | default('') | trim | length > 0

- block:
    - name: Check if directories exist and are readable
      ansible.builtin.stat:
        path: "{{ item.path }}"
      loop: "{{ scan_directories }}"
      register: dir_stats
      changed_when: false
      loop_control:
        loop_var: item

    - name: Fail if directory is not found or not readable
      ansible.builtin.fail:
        msg: "Directory {{ item.0.path }} does not exist or is not readable"
      loop: "{{ scan_directories | zip(dir_stats.results) | list }}"
      when:
        - item.0.exit_when_absent | default(default_exit_when_absent)
        - (not item.1.stat.exists) or (not item.1.stat.readable)
      loop_control:
        loop_var: item

    - name: Gather files from directories
      ansible.builtin.find:
        paths: "{{ item.path }}"
        patterns: "{{ item.patterns | default(default_patterns) }}"
        excludes: "{{ item.excludes | default(default_excludes) }}"
        file_type: "{{ item.file_type | default(default_file_type) }}"
        size: "{{ item.max_size | default(default_max_size) }}"
        depth: "{{ item.depth | default(default_scan_depth) }}"
        follow: "{{ not item.ignore_dir_links | default(default_ignore_dir_links) }}"
        recurse: "{{ item.recurse | default(default_recurse) }}"
      loop: "{{ scan_directories }}"
      changed_when: false
      register: found_files

    - name: Flatten found files
      ansible.builtin.set_fact:
        all_files: "{{ found_files.results | map(attribute='files') | flatten }}"

    - name: Get certificate info for each file
      community.crypto.x509_certificate_info:
        path: "{{ item.path }}"
      loop: "{{ all_files }}"
      register: ci_cert_info
      ignore_errors: yes

  always:
    - name: Remove unused variables
      ansible.builtin.set_fact:
        "{{ item }}": null
      loop:
        - dir_stats
        - found_files
        - all_files
      when: vars[item] is defined
      loop_control:
        label: "{{ item }}"

    - name: Set Local Exporter true if all conditions met
      ansible.builtin.set_fact:
        local_exporter: true
      when:
        - ci_cert_info.results | default('') | trim | length > 0
        - (ci_cert_info.results | selectattr('not_after', 'defined') | list | length) > 0
        - metrics_host_file_path | default('') | trim | length > 0

    - name: Set Local Sender true if all conditions met
      ansible.builtin.set_fact:
        local_sender: true
      when:
        - ci_cert_info.results | default('') | trim | length > 0
        - (ci_cert_info.results | selectattr('not_after', 'defined') | list | length) > 0
        - metrics_aggregate_delegate_host | default('') | trim | length > 0
  when:
    - local_scanner | default(false)

- block:
    - name: Aggregate certificate info from hosts
      ansible.builtin.set_fact:
        ci_cert_info_aggr: >-
          {{
            groups['all'] | map('extract', hostvars)
            | selectattr('local_sender', 'defined')
            | selectattr('local_sender', 'eq', true)
            | selectattr('metrics_aggregate_delegate_host', '==', inventory_hostname)
            | map(attribute='ci_cert_info.results')
            | sum(start=[])
          }}
  always:
    - name: Set Aggregate Exporter true if all conditions met
      ansible.builtin.set_fact:
        aggregate_exporter: true
      when:
        - ci_cert_info_aggr | default('') | trim | length > 0
        - (ci_cert_info_aggr | selectattr('not_after', 'defined') | list | length) > 0
  when:
    - metrics_aggregate_file_path | default('') | trim | length > 0

- block:
    - name: Create aggregated directories and set permissions
      ansible.builtin.file:
        path: "{{ metrics_aggregate_file_path | dirname }}"
        state: directory
        recurse: yes
        owner: "{{ metrics_owner }}"
        group: "{{ metrics_group }}"
        mode: "{{ metrics_dir_mode }}"

    - name: Get current time in timestamp (aggregate)
      ansible.builtin.command: date +%s
      register: current_time
      changed_when: false

    - name: Generate aggregated metrics file
      ansible.builtin.template:
        src: ci_metrics.prom.j2
        dest: "{{ metrics_aggregate_file_path }}"
        owner: "{{ metrics_owner }}"
        group: "{{ metrics_group }}"
        mode: "{{ metrics_file_mode }}"
      vars:
        cert_data: "{{ ci_cert_info_aggr }}"
  always:
    - name: Remove unused variables
      ansible.builtin.set_fact:
        "{{ item }}": null
      loop:
        - ci_cert_info_aggr
      when: vars[item] is defined
      loop_control:
        label: "{{ item }}"
  when:
    - aggregate_exporter | default(false)

- block:
    - name: Create host directories and set permissions
      ansible.builtin.file:
        path: "{{ metrics_host_file_path | dirname }}"
        state: directory
        recurse: yes
        owner: "{{ metrics_owner }}"
        group: "{{ metrics_group }}"
        mode: "{{ metrics_dir_mode }}"

    - name: Get current time in timestamp (host)
      ansible.builtin.command: date +%s
      register: current_time
      changed_when: false

    - name: Generate host metrics file
      ansible.builtin.template:
        src: ci_metrics.prom.j2
        dest: "{{ metrics_host_file_path }}"
        owner: "{{ metrics_owner }}"
        group: "{{ metrics_group }}"
        mode: "{{ metrics_file_mode }}"
      vars:
        cert_data: "{{ ci_cert_info.results }}"
  always:
    - name: Remove unused variables
      ansible.builtin.set_fact:
        "{{ item }}": null
      loop:
        - ci_cert_info
      when: vars[item] is defined
      loop_control:
        label: "{{ item }}"
  when:
    - local_exporter | default(false)
