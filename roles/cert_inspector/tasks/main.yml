---
- name: Check if directories exist and are readable
  ansible.builtin.stat:
    path: "{{ item.path }}"
  loop: "{{ scan_directories }}"
  register: dir_stats
  loop_control:
    loop_var: item
  when:
    - metrics_host | default(false)

- name: Fail if directory is not found or not readable
  ansible.builtin.fail:
    msg: "Directory {{ item.0.path }} does not exist or is not readable"
  loop: "{{ scan_directories | zip(dir_stats.results) | list }}"
  when:
    - item.0.exit_when_absent | default(default_exit_when_absent)
    - (not item.1.stat.exists) or (not item.1.stat.readable)
    - metrics_host | default(false)
  loop_control:
    loop_var: item

- name: Gather files from directories
  ansible.builtin.find:
    paths: "{{ item.path }}"
    patterns: "{{ item.patterns | default(default_patterns) }}"
    excludes: "{{ item.excludes | default(default_excludes) }}"
    file_type: "{{ item.file_type | default(default_file_type) }}"
    size: "{{ item.max_size | default(default_max_size) }}"
    depth: "{{ item.depth | default(default_scan_depth) }}"
    follow: "{{ not item.ignore_dir_links | default(default_ignore_dir_links) }}"
    recurse: "{{ item.recurse | default(default_recurse) }}"
  loop: "{{ scan_directories }}"
  register: found_files
  when:
    - metrics_host | default(false)

- name: Flatten found files
  ansible.builtin.set_fact:
    all_files: "{{ found_files.results | map(attribute='files') | flatten }}"
  when:
    - metrics_host | default(false)

- name: Get certificate info for each file
  community.crypto.x509_certificate_info:
    path: "{{ item.path }}"
  loop: "{{ all_files }}"
  register: cert_info_results
  ignore_errors: yes
  when:
    - metrics_host | default(false)

- name: Aggregate certificate info from hosts
  ansible.builtin.set_fact:
    cert_info_all: >-
      {{
        cert_info_all | default([]) +
        (cert_info_results.results | default([]))
      }}
  delegate_facts: true
  delegate_to: "{{ metrics_aggregate_delegate_host | default(ansible_play_hosts_all[0]) }}"
  when:
    - metrics_aggregate | default(false)
    - metrics_aggregate_delegate_host is defined
    - metrics_aggregate_delegate_host | string != ""

- block:
    - name: Get current time in timestamp (aggregate)
      command: date +%s
      register: current_time
      changed_when: false

    - name: Generate aggregated metrics file
      ansible.builtin.template:
        src: certificates.prom.j2
        dest: "{{ metrics_aggregate_file_path }}"
        owner: "{{ metrics_owner }}"
        group: "{{ metrics_group }}"
        mode: "{{ metrics_mode }}"
      vars:
        cert_data: "{{ cert_info_all }}"
  when:
    - cert_info_all is defined
    - (cert_info_all | selectattr('not_after', 'defined') | list | length) > 0
    - metrics_aggregate_file_path is defined
    - metrics_aggregate_file_path | string != ""

- block:
    - name: Get current time in timestamp (host)
      command: date +%s
      register: current_time
      changed_when: false

    - name: Generate host metrics file
      ansible.builtin.template:
        src: certificates.prom.j2
        dest: "{{ metrics_host_file_path }}"
        owner: "{{ metrics_owner }}"
        group: "{{ metrics_group }}"
        mode: "{{ metrics_mode }}"
      vars:
        cert_data: "{{ cert_info_results.results }}"
  when:
    - cert_info_results.results is defined
    - (cert_info_results.results | selectattr('not_after', 'defined') | list | length) > 0
    - metrics_host_file_path is defined
    - metrics_host_file_path | string != ""
